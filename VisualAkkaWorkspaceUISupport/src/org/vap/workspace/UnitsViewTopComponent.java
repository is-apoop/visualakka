/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.vap.workspace;

import java.util.Collection;
import org.netbeans.api.project.Project;
import org.netbeans.api.project.ProjectUtils;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.NbBundle.Messages;
import org.openide.util.Utilities;
import org.openide.windows.TopComponent;
import org.vap.workspace.unitsnodes.PackageNodeFactory;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.vap.workspace//UnitsView//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "UnitsViewTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "commonpalette", openAtStartup = false)
@ActionID(category = "Window", id = "org.vap.workspace.UnitsViewTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_UnitsViewAction",
        preferredID = "UnitsViewTopComponent"
)
@Messages({
    "CTL_UnitsViewAction=UnitsView",
    "CTL_UnitsViewTopComponent=Units",
    "HINT_UnitsViewTopComponent=This is a UnitsView window"
})
public final class UnitsViewTopComponent extends TopComponent implements ExplorerManager.Provider{

    private static Lookup.Result<Project> lookupResults;
    private static LookupListener lookupListener;
    private transient ExplorerManager explorerManager = new ExplorerManager();
    private BeanTreeView hierarchyView;

    public UnitsViewTopComponent() {
        initComponents();
        hierarchyView = new BeanTreeView();
        setName(Bundle.CTL_UnitsViewTopComponent());
        setToolTipText(Bundle.HINT_UnitsViewTopComponent());
        activate();
        associateLookup(ExplorerUtils.createLookup(explorerManager, getActionMap()));
        explorerManager.setRootContext(new AbstractNode(Children.LEAF));
        explorerManager.getRootContext().setDisplayName("<No Project>");

    }
    
        /**
     *
     * @return
     */
    @Override
    public ExplorerManager getExplorerManager() {
        return explorerManager;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        viewPane = new BeanTreeView();

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(viewPane, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(viewPane, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane viewPane;
    // End of variables declaration//GEN-END:variables
     /**
     *
     */
        @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    /**
     *
     */
    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    /**
     *
     */
    public void activate() {
        if (lookupResults == null) {
            // Monitor the existance of Projects in the global context lookup
            lookupResults = Utilities.actionsGlobalContext().lookupResult(Project.class);
            // Create the listener on the lookupResults
            lookupListener = new LookupListener() {
                // Update window title when the Project changes
                @Override
                public void resultChanged(LookupEvent ignored) {
                    String projectName;
                    Collection<? extends Project> projects = lookupResults.allInstances();
                    if (projects.isEmpty()) {
                        projectName = "<No Project>";
                        UpdateWindow(projectName);
                    } else if (projects.size() == 1) {
                        Project project = projects.iterator().next();
                        UpdateWindow(project);
                    } else {
                        projectName = "Multiple Projects";
                        UpdateWindow(projectName);
                    }
                    
                }
            };
            // Activate the listener
            lookupResults.addLookupListener(lookupListener);
            lookupListener.resultChanged(null);
        }
    }

    void UpdateWindow(final String projectName) {
//        // We have to do this on the AWT thread, so we use the invokeWhenUIReady
//        // method which can be called from any thread.
//        {
//            WindowManager.getDefault().invokeWhenUIReady(new Runnable()
//            {
//                @Override
//                public void run()
//                {
//                    Frame mainWindow = WindowManager.getDefault().getMainWindow();
//                    mainWindow.setTitle(projectName);
//                }
//            });
//        }
        explorerManager.getRootContext().setDisplayName(projectName);
    }
    void UpdateWindow(final Project project) {
        String projectName = ProjectUtils.getInformation(project).getDisplayName();
        explorerManager.setRootContext(new AbstractNode(Children.create(new PackageNodeFactory(project), true)));
        explorerManager.getRootContext().setDisplayName(projectName);
        
    }
}
