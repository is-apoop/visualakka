/*
 */
package org.vap.workspace;

import org.netbeans.api.project.Project;
import org.netbeans.api.project.ProjectUtils;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.util.Lookup;
import org.openide.util.LookupListener;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.vap.workspace.unitsnodes.PackageNodeFactory;

/**
 * Top component which displays units and its methods hierarchy..
 */
@ConvertAsProperties(
        dtd = "-//org.vap.workspace//UnitsPalette//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "UnitsPaletteTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "commonpalette", openAtStartup = false)
@ActionID(category = "Window", id = "org.vap.workspace.UnitsPaletteTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_UnitsPaletteAction",
        preferredID = "UnitsPaletteTopComponent"
)
@Messages({
    "CTL_UnitsPaletteAction=Units",
    "CTL_UnitsPaletteTopComponent=Units",
    "HINT_UnitsPaletteTopComponent=This is a Units window"
})
public final class UnitsPaletteTopComponent extends TopComponent implements ExplorerManager.Provider {

    private static Lookup.Result<Project> lookupResults;
    private static LookupListener lookupListener;
    private transient ExplorerManager explorerManager = new ExplorerManager();
    private BeanTreeView hierarchyView;

    public UnitsPaletteTopComponent() {
        initComponents();
        hierarchyView = new BeanTreeView();
        setName(Bundle.CTL_UnitsPaletteTopComponent());
        setToolTipText(Bundle.HINT_UnitsPaletteTopComponent());
        associateLookup(ExplorerUtils.createLookup(explorerManager, getActionMap()));
        explorerManager.setRootContext(new AbstractNode(Children.LEAF));
        explorerManager.getRootContext().setDisplayName("<No Project>");
    }

    /**
     *
     * @return
     */
    @Override
    public ExplorerManager getExplorerManager() {
        return explorerManager;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        viewPane = new BeanTreeView();

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(viewPane, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(viewPane, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane viewPane;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    public void UpdateWindow(final String projectName) {
        explorerManager.getRootContext().setDisplayName(projectName);
    }

    public void UpdateWindow(final Project project) {
        String projectName = ProjectUtils.getInformation(project).getDisplayName();
        explorerManager.setRootContext(new AbstractNode(Children.create(new PackageNodeFactory(project), true)));
        explorerManager.getRootContext().setDisplayName(projectName);

    }
}
